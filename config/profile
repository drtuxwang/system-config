#
# $HOME/.profile for sh/ksh/bash shells
#
# 1) Create "$HOME/.profile-2bash" to auto switch to bash shell
# 2) Create "$HOME/.profile-local" for local settings
#

##set -x

if [ "$TERM" -a "$TERM" != dumb ]
then
    if [ "$BASH" ]
    then
        if [ "$(cmp $BASH $(which bash))" ]
        then
            exec $(which bash) -l
        fi
    elif [ -f $HOME/.profile-2bash -a -f /bin/bash ]
    then
        export ENV=$HOME/.profile
        exec /bin/bash -l
    fi
    if [ "$TERM" = "xterm-256color" ]
    then
        export TERM=xterm
    fi

    # Terminal Multiplexer
    if [ "`tmux -V 2> /dev/null | grep \"^tmux \"`" ]
    then
        if [ "$TMUX" ]
        then
            if [ ! "$MYSCREEN" ]
            then
                export MYSCREEN="tmux:$(timeout --signal=KILL 1 tmux display-message -p '#S' 2> /dev/null)"
                MYTTY=
            fi
            export PROJ_HOME="$HOME/git/$(timeout --signal=KILL 1 tmux display-message -p '#S' 2> /dev/null)"
        elif [ "$TERM" = "screen" ]
        then
            export MYSCREEN="???"
            alias tmux='echo "sessions should be nested with care, already running multiplexer" #'
        fi
    else
        unset MYSCREEN
    fi

    # Removing soft shell limit
    for _limit in `\ulimit -a 2> /dev/null | \sed -e "s/.*-//" | \cut -c1 | \grep -v c`
    do
        \ulimit -$_limit `\ulimit -$_limit -H 2> /dev/null` 2> /dev/null
    done
    unset _limit

    # Session control
    export MYHNAME=`uname -n | tr '[A-Z]' '[a-z]' | cut -f1 -d"."`
    export MYUNAME=`whoami 2> /dev/null`
    [ ! "$MYUNAME" ] && export MYUNAME=`id -un`
    if [ "$BASH" -o "`echo $0 | \grep \"ash$\"`" ]
    then
        __fcd() {
            local directory=${1:-$HOME/Desktop}
            cd $(eval realpath "$directory" 2> /dev/null)
        }
        __git_ps1() {
            local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
            [ "$branch" ] && echo " ($branch)"
        }
        __kube_ps1() {
            [ -f "$KUBECONFIG" ] && echo " ${KUBECONFIG##*/}"
        }
        __venv_ps1() {
            [ "${VIRTUAL_ENV:-}" ] && echo " ${VIRTUAL_ENV##*/}"
        }
        __kubeconfig() {
            ls -1 $HOME/.kube/*.yaml 2> /dev/null | sed -e "s@.*/@  Kubeconfig: @"
            echo -e "\nPlease select profile:"
            local selection
            read selection
            if [ -f "$HOME/.kube/$selection" ]
            then
                export KUBECONFIG="$HOME/.kube/$selection"
                echo "KUBECONFIG=$KUBECONFIG"
            fi
        }
        alias o=open
        alias v=view
        alias fcd=__fcd
        if [ ! "$KUBECONFIG" ]
        then
            KUBECONFIG=$(realpath $HOME/.kube/config 2> /dev/null)
        fi
        alias kubeconfig=__kubeconfig
        MYSHELL="${0/-/}"
        PS1='\[\033[01;32m\][\t] \[\033[01;34m\]`pwd`\[\033[01;31m\]`__git_ps1``__kube_ps1``__venv_ps1`\n\[\033[01;32m\]'$MYUNAME'@'$MYHNAME'\[\033[00m\] $ '

        # VM/Container detection
        case `uname` in
        *NT*)
            HARDWARES=`PATH="$WINDIR/system32:$WINDIR/system32/wbem:$PATH" $WINDIR/system32/systeminfo 2> /dev/null`
            case "$HARDWARES" in
            *VirtualBox*)
                PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](VirtualBox)/')
                ;;
            *VMware\ *)
                PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](VMware)/')
                ;;
            esac
            ;;
        *)
            if [ -f "/.dockerenv" -o "$(grep " /docker[/-]" /proc/1/mountinfo 2> /dev/null)" ]
            then
                PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](Docker '$(grep -E -m1 "( /docker/|containers/)" /proc/1/mountinfo | sed -e "s@.*/docker/@@;s@^containers/@@" | cut -c1-12)')/')
            elif [ "`awk '$5=="/" {print $1}' /proc/1/mountinfo 2> /dev/null`" != "`awk '$5=="/" {print $1}' /proc/$$/mountinfo 2> /dev/null`" ]
            then
                if [ ! "$_CHROOT_INIT" ]
                then
                    export _CHROOT_INIT=$$
                    unset TMUX
                fi
                if [ "$_SANDBOX_PARENT" ]
                then
                    PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](Sandbox '$_SANDBOX_PARENT')/')
                else
                    PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](chroot)/')
                fi
            elif [ -d "/proc/xen" ]
            then
                PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](Xen)/')
            else
                case $(cat /proc/ide/hd?/model /proc/scsi/scsi /proc/bus/input/devices 2> /dev/null; /sbin/lsmod 2> /dev/null) in
                *Hyper-V*|*hv_*)
                    PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](Hyper-V)/')
                    ;;
                *qemu*|*QEMU*)
                    PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](QEMU)/')
                    ;;
                *VBOX*|*vboxguest*)
                    PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](VirtualBox)/')
                    ;;
                *VM[Ww]are*|*vmw_*)
                    PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](VMware)/')
                    ;;
                *xen_blkfront*)
                    PS1=$(echo "$PS1" | sed -e 's/'$MYHNAME'/& \\[\\033[01;31m\\](Xen)/')
                    ;;
                esac
            fi
            ;;
        esac

        case $TERM in
        screen|xterm)
            PS1='\033]0;'$MYHNAME':`pwd`\007'"$PS1"
            preexec() {
                \echo -e "\033]0;$MYHNAME:$PWD $ $BASH_COMMAND\007\c"
            }
            trap 'preexec' DEBUG 2> /dev/null
            ;;
        esac

        complete -f -o default 7z 2> /dev/null
        complete -f -o default tar 2> /dev/null
        complete -f -o default wine 2> /dev/null
        complete -F _command qsub 2> /dev/null
        complete -F _command myqsub 2> /dev/null
    elif [ "`echo $0 | \grep \"ksh$\"`" ]
    then
        MYSHELL="KORN"
        PS1="$MYUNAME@${MYHNAME} $ "
        set -o emacs
        alias -x __A=$(print '\020' 2> /dev/null) 2> /dev/null # up    = Last line
        alias -x __B=$(print '\016' 2> /dev/null) 2> /dev/null # down  = Next line
        alias -x __C=$(print '\006' 2> /dev/null) 2> /dev/null # right = Move right
        alias -x __D=$(print '\002' 2> /dev/null) 2> /dev/null # left  = Move left
    else
        MYSHELL="BOURNE"
    fi

    # Setup SSH agent
    if [ ! -e "$SSH_AUTH_SOCK" ]
    then
        if [ ! "`ps -u $MYUNAME 2> /dev/null | grep ssh-agent`" ]
        then
            find /tmp/ssh-* /var/folders/*/*/*/ssh-* -type d -user $MYUNAME -exec rm -rf {} + 2> /dev/null
        fi
        export SSH_AUTH_SOCK=$(\ls -1t /tmp/ssh-*/* /var/folders/*/*/*/ssh-*/* 2> /dev/null | head -1)
        if [ "$SSH_AUTH_SOCK" ]
        then
            ln -s ${SSH_AUTH_SOCK%/*} /tmp 2> /dev/null
        else
            eval $(ssh-agent 2> /dev/null) > /dev/null
        fi
    fi
    SSH_KEYS=`ssh-add -l 2> /dev/null | grep ".:." | wc -l | awk '{print $1}'`

    # Setup terminal
    alias logout=\\exit  # required by ash
    if [ "$MYTTY" != "`\tty 2> /dev/null`" ]
    then
        export MYTTY=`\tty 2> /dev/null`
        export GPG_TTY="$MYTTY"
        (mesg n) > /dev/null 2>&1
        export TMOUT=0
        stty erase "^?" 2> /dev/null  # ^H alternative
        stty intr ^C 2> /dev/null
        stty susp ^Z 2> /dev/null
        if [ "$(grep ":name=.*/docker[/-]" /proc/1/cgroup 2> /dev/null)" ]
        then
            MYSHELL="$MYSHELL container"
            if [ $$ = 1 -o "$(grep "PPid:[^0-9]*1$" /proc/$$/status 2> /dev/null)" ]
            then
                MYSHELL="$MYSHELL run"
                alias exit='echo Use \"logout\" to terminate container.'
                set -o ignoreeof
            else
                MYSHELL="$MYSHELL exec"
            fi
        elif [ "$SUDO_COMMAND" ]
        then
            MYSHELL="$MYSHELL sudo"
        elif [ "$TMUX" ]
        then
            MYSHELL="$MYSHELL tmux"
            unset SSH_CONNECTION
            alias exit='echo Use \"CTRL+b x\" to kill tmux pane.'
            alias logout='echo Use \"CTRL+b x\" to kill tmux pane.'
            set -o ignoreeof
        elif [ "$SSH_CONNECTION" ]
        then
            MYSHELL="$MYSHELL remote"
            alias exit='echo Use \"logout\" to disconnect remote shell.'
            set -o ignoreeof
        else
            MYSHELL="$MYSHELL login"
            alias exit='echo Use \"logout\" to close login shell.'
            set -o ignoreeof
        fi
        alias exec=""
    fi

    # Use /tmp (tmpfs) for cache
    export TMPDIR="/tmp/$MYUNAME"
    rm -f `find $HOME/.???* -xdev -type l 2> /dev/null | xargs -r -d '\n' ls -ld 2> /dev/null | \
        grep " -> /tmp" | grep -v " -> /tmp/$MYUNAME/" | sed -e "s/ ->.*//;s/.* //"`
    mkdir -p $TMPDIR/.cache
    if [ ! -h $HOME/.cache ]
    then
        rm -rf $HOME/.cache 2> /dev/null
        ln -s $TMPDIR/.cache $HOME/.cache 2> /dev/null
    fi
    ENV=

    # Protect files
    case $MYUNAME in
    root|admin)
        ls -ld $HOME | grep -v "rwx------" | awk '{print $NF}' | xargs -n 1 chmod 700 2> /dev/null
        ;;
    *)
        ls -ld $HOME | grep -v "rwx--x--x" | awk '{print $NF}' | xargs -n 1 chmod 711 2> /dev/null
        ;;
    esac
    ls -ld $TMPDIR $HOME/Desktop $HOME/Desktop/private $HOME/.???* 2> /dev/null | \
        grep -v "[-]----- " | awk '{print $NF}' | xargs -n 1 chmod go= 2> /dev/null

    # General stuff
    umask 022
    export LC_COLLATE=C
    export EDITOR=vi
    export HISTCONTROL=ignoredups
    export HISTFILE=
    export HISTSIZE=256
    export HISTTIMEFORMAT=
    export LESSHISTFILE=/dev/null
    export PIP_BREAK_SYSTEM_PACKAGES=1
    export PYTHONDONTWRITEBYTECODE=1
    export TIMEFORMAT=" [ time(s)  -  real: %2R  user: %2U  sys: %2S  cpu: %P%% ]"

    # Save/load default path settings
    if [ ! "$BASE_PATH" ]
    then
        if [ ! "$LM_LICENSE_FILE" ]
        then
            export LM_LICENSE_FILE=
        fi
        if [ ! "$LD_LIBRARY_PATH" ]
        then
            export LD_LIBRARY_PATH=
        fi
        if [ ! "$PYTHONPATH" ]
        then
            export PYTHONPATH=
        fi
        if [ ! "$MANPATH" ]
        then
            export MANPATH=
        fi
        export BASE_PATH="$PATH"
        export BASE_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
        export BASE_PYTHONPATH="$PYTHONPATH"
        export BASE_MANPATH="$MANPATH"
    else
        case `uname` in
        *NT*)
            export PATH=`/bin/cygpath --unix --path "$BASE_PATH"`
            export PYTHONPATH=`/bin/cygpath --unix --path "$BASE_PYTHONPATH"`
            export MANPATH=`/bin/cygpath --unix --path "$BASE_MANPATH"`
            ;;
        *)
            export PATH="$BASE_PATH"
            export LD_LIBRARY_PATH="$BASE_LD_LIBRARY_PATH"
            export PYTHONPATH="$BASE_PYTHONPATH"
            export MANPATH="$BASE_MANPATH"
            ;;
        esac
    fi
    if [ "$MYUNAME" = root -a ! "$(echo :$PATH: | grep :/sbin:)" ]
    then
        export PATH=/sbin:$PATH
    fi

    # Fix command aliases
    if [ "`which ssudo 2> /dev/null`" ]
    then
        alias sudo="ssudo"
    fi
    if [ "`which htop 2> /dev/null`" ]
    then
        alias top="htop"
    fi
    alias df="df -k"
    alias du="du -k"
    if [ "$BASH" ]
    then
        alias h="history 256"
        rm -f $HOME/.bash_history
    else
        alias h='fc -l 1 2> /dev/null | tail -256'
    fi
    alias ls="ls -C"
    alias quota="quota -v"
    alias rehash='hash -r'
    alias resize='resize && eval `\\resize`'
    if [ -x /usr/bin/vim ]
    then
        alias vi="vim -N -n -i NONE -T xterm"
        rm -f $HOME/.viminfo
    fi
    unalias cp cd.. d l ll la lsd mv p rm s which 2> /dev/null

    # mk[0-9a-z], cd[0-9a-z], scd, cd-
    for _dir in 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z
    do
        alias mk$_dir='cd "$PWD" && export cd'$_dir'="$PWD" && echo "cd'$_dir'=$PWD"'
        alias cd$_dir='echo "cd \"$cd'$_dir'\"" && cd "$cd'$_dir'"'
    done
    unset _dir
    alias scd='env | grep "^cd[0-9a-z]=" | sort'
    alias cd-='cd $OLDPWD'

    # Platform specific
    case `uname` in
    Darwin)
        if [ "`\ls --help 2>&1 | \grep ' --color'`" ]
        then
            alias ls="ls -C --color=auto"
            alias grep="grep --color=auto"
        else
            alias ls="ls -C -G"
        fi
        . /usr/local/etc/bash_completion 2> /dev/null
        export BASH_SILENCE_DEPRECATION_WARNING=1  # Disable zsh warning
        if [ ! "$DISPLAY" ]
        then
            export DISPLAY=:0  # XQuartz
        fi
        ;;

    Linux|*NT*)
        if [ "`\ls --help 2>&1 | \grep ' --color'`" ]
        then
            alias ls="ls -C --color=auto"
            alias grep="grep --color=auto"
        else
            alias ls="ls -C"
        fi
        # Defend against stubborn Linux distributions
        if [ -f /etc/ksh.kshrc ]
        then
            alias test='return 2> /dev/null'
        fi
        unset CDPATH LS_COLORS PROMPT_COMMAND 2> /dev/null
        unset command_not_found_handle
        ;;
    esac
    export PATH="$HOME/software/scripts:$HOME/software/bin:/opt/software/bin:$PATH"
    if [ "$VIRTUAL_ENV" ]
    then
        export PATH="$VIRTUAL_ENV/bin:$PATH"
    fi

    # Change to $HOME/Desktop
    if [ "$PWD" = "$HOME" -o "$PWD" = "/" ]
    then
        mkdir -p $HOME/Desktop/Downloads 2> /dev/null
        cd "$HOME/Desktop" 2> /dev/null
    fi

    # Show information
    echo
    sysinfo -s 2> /dev/null
    MYINFO="$MYSHELL shell (tty=$MYTTY"
    if [ "$SSH_KEYS" != 0 ]
    then
        MYINFO="$MYINFO, ssh-add=$SSH_KEYS"
    fi
    if [ "$MYSCREEN" ]
    then
        MYINFO="$MYINFO, screen=$MYSCREEN"
    fi
    MYINFO="$MYINFO)"
    echo "$MYINFO"
    echo
fi

# Applying optional settings
if [ -f $HOME/.profile-opt ]
then
    . $HOME/.profile-opt
fi
